#! /usr/bin/ruby

require "pathname"

require "rexml"

require "optparse"

class String

	def self.remove_start_intersection( string1, string2 )

		intersected = 0

		while ( string1[intersected] == string2[intersected] )

			intersected += 1

		end

		intersected -= 1

		string1.slice!( 0..intersected )

		string2.slice!( 0..intersected )

	end

end

options = {}

OptionParser.new do |parser|

	parser.on( "--write [TO_FILE]", "Write result to file instead of stdout. If no file is given, write to [--html] file." )

	parser.on( "--kaki PATH", "Path to kaki directory." )

	parser.on( "--html FILE", "Path to file that will be fixed." )

end.parse!( into: options )

kaki = Pathname.new( options[:"kaki"] ).realpath().to_s()

html = Pathname.new( options[:"html"] ).realpath().to_s()

doc = REXML::Document.new( File.read( html ) )

$output = STDOUT

for key, value in options

	case key

	when :"write"

		if ( value == nil ) then ( $output = File.open( html, mode='w' ) ) else ( $output = File.open( value, mode='w' ) ) end

	end

end

formatter = REXML::Formatters::Pretty.new( identation=1 )

String.remove_start_intersection( kaki, html )

if ( html[0] == '/' ) then ( html.delete_prefix!( '/' ) ) end

html_distance_to_top = html.count( "/" )

if ( kaki.empty? == false )

	css_url = ( "../" * html_distance_to_top ) + kaki + '/main.css'

	js_url = ( "../" * html_distance_to_top ) + kaki + '/main.js'

else

	css_url = ( "../" * html_distance_to_top ) + 'main.css'

	js_url = ( "../" * html_distance_to_top ) + 'main.js'

end

stylesheets = REXML::XPath.match( doc.root, "//link[@rel=\"stylesheet\"]" )

scripts = REXML::XPath.match( doc.root, "//script" )

for stylesheet in stylesheets

	if ( stylesheet["href"] != nil ) and ( stylesheet["href"].include?( "main.css" ) )

		stylesheet.add_attribute( "href", css_url )

	end

end

for script in scripts

	if ( script["src"] != nil ) and ( script["src"].include?( "main.js" ) )

		script.add_attribute( "src", js_url )

	end

end

formatter.write( doc, $output )
